/*
 * Java 8 SDK for the KATANA(tm) Platform (http://katana.kusanagi.io)
 * Copyright (c) 2016-2017 KUSANAGI S.L. All rights reserved.
 *
 * Distributed under the MIT license
 *
 * For the full copyright and license information, please view the LICENSE
 *  file that was distributed with this source code
 *
 * @link      https://github.com/kusanagi/katana-sdk-java8
 * @license   http://www.opensource.org/licenses/mit-license.php MIT License
 * @copyright Copyright (c) 2016-2017 KUSANAGI S.L. (http://kusanagi.io)
 *
 */

apply plugin: 'application'
apply plugin: "jacoco"
apply plugin: 'maven'
apply plugin: 'signing'

group 'io.kusanagi'
archivesBaseName = "katana-sdk-java8"
version '1.0.0'

mainClassName = 'io.kusanagi.katana.api.component.Component'

applicationDefaultJvmArgs = ["-Djava.library.path=/usr/local/lib -Dkatanaip=127.0.0.1"]

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    compile 'org.zeromq:jeromq:0.3.5'
    compile 'org.msgpack:msgpack-core:0.8.11'
    compile 'org.msgpack:jackson-dataformat-msgpack:0.8.11'
    compile 'org.apache.commons:commons-lang3:3.5'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    from {
        configurations.compile.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
}

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.1"
        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.8.0"
    }
}

apply plugin: "com.github.kt3k.coveralls"
apply plugin: 'io.codearte.nexus-staging'

jacocoTestReport {
    reports {
        xml.enabled true
        csv.enabled false
        html.destination "${buildDir}/jacocoHtml"
    }
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives javadocJar, sourcesJar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
                authentication(userName: ossrhUsername, password: ossrhPassword)
            }

            pom.project {
                name 'katana-sdk-java8'
                packaging 'jar'
                // optionally artifactId can be defined here
                description 'Java SDK to interface with the KATANAâ„¢ framework'
                url 'https://github.com/kusanagi/katana-sdk-java8'

                organization {
                    name 'kusanagi'
                    url 'https://kusanagi.io/'
                }
                licenses {
                    license {
                        name 'MIT License'
                        url 'http://www.opensource.org/licenses/mit-license.php'
                        distribution 'repo'
                    }
                }
                scm {
                    url 'https://github.com/kusanagi/katana-sdk-java8'
                    connection 'scm:git:https://github.com/kusanagi/katana-sdk-java8.git'
                    developerConnection 'scm:git@github.com:kusanagi/katana-sdk-java8.git'
                }
                developers {
                    developer {
                        id 'jega'
                        name 'Juan Garcia'
                        email 'jegasmlm@gmail.com'
                    }
                }
            }
        }
    }
}

nexusStaging {
    username = ossrhUsername
    password = ossrhPassword
    packageGroup = "io.kusanagi" //optional if packageGroup == project.getGroup()
    stagingProfileId = "io.kusanagi" //when not defined will be got from server using "packageGroup"
}
